rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAuthenticated() && 
                   request.auth.uid == userId &&
                   (
                     // Allow updating profile fields including photoURL and lastLogin
                     request.resource.data.diff(resource.data).affectedKeys()
                       .hasOnly(['photoURL', 'phoneNumber', 'address', 'name', 'lastUpdated', 'lastLogin']) ||
                     // Allow admins to update any field
                     isAdmin()
                   );
      allow delete: if false;
    }

    // Participants collection - optimized for large datasets
    match /participants/{participantId} {
      // Allow read access without pagination limit
      allow list: if isAuthenticated();
      
      // Allow individual document reads
      allow get: if isAuthenticated();
      
      // Allow writes only for authenticated users
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated();
      
      // Optimize subcollection access
      match /{document=**} {
        allow read, write: if isAuthenticated();
      }
    }

    // Family details collection - optimized for large datasets
    match /familydetails/{familyId} {
      // Allow read access without pagination limit
      allow list: if isAuthenticated();
      
      // Allow individual document reads
      allow get: if isAuthenticated();
      
      // Allow writes only for authenticated users
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated();
      
      // Optimize subcollection access
      match /{document=**} {
        allow read, write: if isAuthenticated();
      }
    }

    // Vendors collection
    match /vendors/{vendorId} {
      allow read, write: if isAuthenticated();
      match /{document=**} {
        allow read, write: if isAuthenticated();
      }
    }

    // Programs collection
    match /programs/{programId} {
      allow read, write: if true;
      
      // Allow access to nested collections/documents
      match /{document=**} {
        allow read, write: if true;
      }
    }

    // Beneficiaries collection
    match /beneficiaries/{beneficiaryId} {
      allow read, write: if isAuthenticated();
      match /{document=**} {
        allow read, write: if isAuthenticated();
      }
    }

    // Files collection for storing file metadata and chunks
    match /files/{fileId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
                   request.resource.data.size < 10485760 && // 10MB limit
                   request.resource.data.uploaderId == request.auth.uid;
      allow update: if isAuthenticated() && 
                   request.auth.uid == resource.data.uploaderId;
      allow delete: if isAuthenticated() && 
                   request.auth.uid == resource.data.uploaderId;

      // Allow access to chunks subcollection
      match /chunks/{chunkId} {
        allow read: if isAuthenticated() &&
                   get(/databases/$(database)/documents/files/$(fileId)).data.uploaderId == request.auth.uid;
        allow create: if isAuthenticated() &&
                     get(/databases/$(database)/documents/files/$(fileId)).data.uploaderId == request.auth.uid;
        allow delete: if isAuthenticated() &&
                     get(/databases/$(database)/documents/files/$(fileId)).data.uploaderId == request.auth.uid;
      }
    }

    // Default deny 
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
